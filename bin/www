#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sejiwa:server');
var http = require('http');
// let socketIo = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// let io = socketIo(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// io.on('connection', async () => {
//   console.log('Client connected...')

  // let currentRules

  // try {
  //   //   Get all stream rules
  //   currentRules = await getRules()

  //   // Delete all stream rules
  //   await deleteRules(currentRules)

  //   // Set rules based on array above
  //   await setRules()
  // } catch (error) {
  //   console.error(error)
  //   process.exit(1)
  // }

  // const filteredStream = streamTweets(io)

  // let timeout = 0
  // filteredStream.on('timeout', () => {
  //   // Reconnect on error
  //   console.warn('A connection error occurred. Reconnectingâ€¦')
  //   setTimeout(() => {
  //     timeout++
  //     streamTweets(io)
  //   }, 2 ** timeout)
  //   streamTweets(io)
  // })
// })